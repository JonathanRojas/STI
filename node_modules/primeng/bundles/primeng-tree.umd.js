(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),require('primeng/api'),exports, require('@angular/core'), require('@angular/common'), require('primeng/api'), require('primeng/utils'), require('primeng/dom')) :
    typeof define === 'function' && define.amd ? define('primeng/tree', ['@angular/core','@angular/common','primeng/api','exports', '@angular/core', '@angular/common', 'primeng/api', 'primeng/utils', 'primeng/dom'], factory) :
    (global = global || self, factory(global.ng.core,global.ng.common,global.primeng.api,(global.primeng = global.primeng || {}, global.primeng.tree = {}), global.ng.core, global.ng.common, global.primeng.api, global.primeng.utils, global.primeng.dom));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,exports, core, common, api, utils, dom) { 
var _c0 = function (a0) { return { "ui-treenode-droppoint-active ui-state-highlight": a0 }; };
function UITreeNode_ng_template_0_li_0_Template(rf, ctx) { if (rf & 1) {
    var _r742 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 4);
    ɵngcc0.ɵɵlistener("drop", function UITreeNode_ng_template_0_li_0_Template_li_drop_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r742); var ctx_r741 = ɵngcc0.ɵɵnextContext(2); return ctx_r741.onDropPoint($event, 0 - 1); })("dragover", function UITreeNode_ng_template_0_li_0_Template_li_dragover_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r742); var ctx_r743 = ɵngcc0.ɵɵnextContext(2); return ctx_r743.onDropPointDragOver($event); })("dragenter", function UITreeNode_ng_template_0_li_0_Template_li_dragenter_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r742); var ctx_r744 = ɵngcc0.ɵɵnextContext(2); return ctx_r744.onDropPointDragEnter($event, 0 - 1); })("dragleave", function UITreeNode_ng_template_0_li_0_Template_li_dragleave_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r742); var ctx_r745 = ɵngcc0.ɵɵnextContext(2); return ctx_r745.onDropPointDragLeave($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r737 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(1, _c0, ctx_r737.draghoverPrev));
} }
var _c1 = function (a0) { return { "ui-state-disabled": a0 }; };
var _c2 = function (a0, a1) { return { "pi-check": a0, "pi-minus": a1 }; };
function UITreeNode_ng_template_0_li_1_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵelementStart(1, "div", 13);
    ɵngcc0.ɵɵelement(2, "span", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r746 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵattribute("aria-checked", ctx_r746.isSelected());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c1, ctx_r746.node.selectable === false));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(5, _c2, ctx_r746.isSelected(), ctx_r746.node.partialSelected));
} }
function UITreeNode_ng_template_0_li_1_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span");
} if (rf & 2) {
    var ctx_r747 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵclassMap(ctx_r747.getIcon());
} }
function UITreeNode_ng_template_0_li_1_span_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r748 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r748.node.label);
} }
function UITreeNode_ng_template_0_li_1_span_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
var _c3 = function (a0) { return { $implicit: a0 }; };
function UITreeNode_ng_template_0_li_1_span_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtemplate(1, UITreeNode_ng_template_0_li_1_span_7_ng_container_1_Template, 1, 0, "ng-container", 15);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r749 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r749.tree.getTemplateForNode(ctx_r749.node))("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c3, ctx_r749.node));
} }
function UITreeNode_ng_template_0_li_1_ul_8_p_treeNode_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "p-treeNode", 18);
} if (rf & 2) {
    var childNode_r753 = ctx.$implicit;
    var firstChild_r754 = ctx.first;
    var lastChild_r755 = ctx.last;
    var index_r756 = ctx.index;
    var ctx_r752 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵproperty("node", childNode_r753)("parentNode", ctx_r752.node)("firstChild", firstChild_r754)("lastChild", lastChild_r755)("index", index_r756);
} }
function UITreeNode_ng_template_0_li_1_ul_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ul", 16);
    ɵngcc0.ɵɵtemplate(1, UITreeNode_ng_template_0_li_1_ul_8_p_treeNode_1_Template, 1, 5, "p-treeNode", 17);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r750 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵstyleProp("display", ctx_r750.node.expanded ? "block" : "none");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r750.node.children)("ngForTrackBy", ctx_r750.tree.nodeTrackBy);
} }
var _c4 = function (a1, a2) { return ["ui-treenode", a1, a2]; };
var _c5 = function (a0, a1, a2) { return { "ui-treenode-selectable": a0, "ui-treenode-dragover": a1, "ui-treenode-content-selected": a2 }; };
var _c6 = function (a0, a1) { return { "pi-caret-right": a0, "pi-caret-down": a1 }; };
var _c7 = function (a0) { return { "ui-state-highlight": a0 }; };
function UITreeNode_ng_template_0_li_1_Template(rf, ctx) { if (rf & 1) {
    var _r758 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 5);
    ɵngcc0.ɵɵelementStart(1, "div", 6);
    ɵngcc0.ɵɵlistener("click", function UITreeNode_ng_template_0_li_1_Template_div_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r758); var ctx_r757 = ɵngcc0.ɵɵnextContext(2); return ctx_r757.onNodeClick($event); })("contextmenu", function UITreeNode_ng_template_0_li_1_Template_div_contextmenu_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r758); var ctx_r759 = ɵngcc0.ɵɵnextContext(2); return ctx_r759.onNodeRightClick($event); })("touchend", function UITreeNode_ng_template_0_li_1_Template_div_touchend_1_listener() { ɵngcc0.ɵɵrestoreView(_r758); var ctx_r760 = ɵngcc0.ɵɵnextContext(2); return ctx_r760.onNodeTouchEnd(); })("drop", function UITreeNode_ng_template_0_li_1_Template_div_drop_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r758); var ctx_r761 = ɵngcc0.ɵɵnextContext(2); return ctx_r761.onDropNode($event); })("dragover", function UITreeNode_ng_template_0_li_1_Template_div_dragover_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r758); var ctx_r762 = ɵngcc0.ɵɵnextContext(2); return ctx_r762.onDropNodeDragOver($event); })("dragenter", function UITreeNode_ng_template_0_li_1_Template_div_dragenter_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r758); var ctx_r763 = ɵngcc0.ɵɵnextContext(2); return ctx_r763.onDropNodeDragEnter($event); })("dragleave", function UITreeNode_ng_template_0_li_1_Template_div_dragleave_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r758); var ctx_r764 = ɵngcc0.ɵɵnextContext(2); return ctx_r764.onDropNodeDragLeave($event); })("dragstart", function UITreeNode_ng_template_0_li_1_Template_div_dragstart_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r758); var ctx_r765 = ɵngcc0.ɵɵnextContext(2); return ctx_r765.onDragStart($event); })("dragend", function UITreeNode_ng_template_0_li_1_Template_div_dragend_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r758); var ctx_r766 = ɵngcc0.ɵɵnextContext(2); return ctx_r766.onDragStop($event); })("keydown", function UITreeNode_ng_template_0_li_1_Template_div_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r758); var ctx_r767 = ɵngcc0.ɵɵnextContext(2); return ctx_r767.onKeyDown($event); });
    ɵngcc0.ɵɵelementStart(2, "span", 7);
    ɵngcc0.ɵɵlistener("click", function UITreeNode_ng_template_0_li_1_Template_span_click_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r758); var ctx_r768 = ɵngcc0.ɵɵnextContext(2); return ctx_r768.toggle($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, UITreeNode_ng_template_0_li_1_div_3_Template, 3, 8, "div", 8);
    ɵngcc0.ɵɵtemplate(4, UITreeNode_ng_template_0_li_1_span_4_Template, 1, 2, "span", 3);
    ɵngcc0.ɵɵelementStart(5, "span", 9);
    ɵngcc0.ɵɵtemplate(6, UITreeNode_ng_template_0_li_1_span_6_Template, 2, 1, "span", 10);
    ɵngcc0.ɵɵtemplate(7, UITreeNode_ng_template_0_li_1_span_7_Template, 2, 4, "span", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(8, UITreeNode_ng_template_0_li_1_ul_8_Template, 2, 4, "ul", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r738 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(13, _c4, ctx_r738.node.styleClass || "", ctx_r738.isLeaf() ? "ui-treenode-leaf" : ""));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("draggable", ctx_r738.tree.draggableNodes)("ngClass", ɵngcc0.ɵɵpureFunction3(16, _c5, ctx_r738.tree.selectionMode && ctx_r738.node.selectable !== false, ctx_r738.draghoverNode, ctx_r738.isSelected()));
    ɵngcc0.ɵɵattribute("aria-posinset", ctx_r738.index + 1)("aria-expanded", ctx_r738.node.expanded)("aria-selected", ctx_r738.isSelected());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(20, _c6, !ctx_r738.node.expanded, ctx_r738.node.expanded));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r738.tree.selectionMode == "checkbox");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r738.node.icon || ctx_r738.node.expandedIcon || ctx_r738.node.collapsedIcon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(23, _c7, ctx_r738.isSelected()));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r738.tree.getTemplateForNode(ctx_r738.node));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r738.tree.getTemplateForNode(ctx_r738.node));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r738.node.children && ctx_r738.node.expanded);
} }
function UITreeNode_ng_template_0_li_2_Template(rf, ctx) { if (rf & 1) {
    var _r770 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 4);
    ɵngcc0.ɵɵlistener("drop", function UITreeNode_ng_template_0_li_2_Template_li_drop_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r770); var ctx_r769 = ɵngcc0.ɵɵnextContext(2); return ctx_r769.onDropPoint($event, 1); })("dragover", function UITreeNode_ng_template_0_li_2_Template_li_dragover_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r770); var ctx_r771 = ɵngcc0.ɵɵnextContext(2); return ctx_r771.onDropPointDragOver($event); })("dragenter", function UITreeNode_ng_template_0_li_2_Template_li_dragenter_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r770); var ctx_r772 = ɵngcc0.ɵɵnextContext(2); return ctx_r772.onDropPointDragEnter($event, 1); })("dragleave", function UITreeNode_ng_template_0_li_2_Template_li_dragleave_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r770); var ctx_r773 = ɵngcc0.ɵɵnextContext(2); return ctx_r773.onDropPointDragLeave($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r739 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(1, _c0, ctx_r739.draghoverNext));
} }
var _c8 = function (a0) { return { "ui-treenode-connector-line": a0 }; };
function UITreeNode_ng_template_0_table_3_td_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 25);
    ɵngcc0.ɵɵelementStart(1, "table", 26);
    ɵngcc0.ɵɵelementStart(2, "tbody");
    ɵngcc0.ɵɵelementStart(3, "tr");
    ɵngcc0.ɵɵelement(4, "td", 27);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "tr");
    ɵngcc0.ɵɵelement(6, "td", 27);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r774 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(2, _c8, !ctx_r774.firstChild));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(4, _c8, !ctx_r774.lastChild));
} }
var _c9 = function (a0, a1) { return { "pi-plus": a0, "pi-minus": a1 }; };
function UITreeNode_ng_template_0_table_3_span_6_Template(rf, ctx) { if (rf & 1) {
    var _r781 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 7);
    ɵngcc0.ɵɵlistener("click", function UITreeNode_ng_template_0_table_3_span_6_Template_span_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r781); var ctx_r780 = ɵngcc0.ɵɵnextContext(3); return ctx_r780.toggle($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r775 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(1, _c9, !ctx_r775.node.expanded, ctx_r775.node.expanded));
} }
function UITreeNode_ng_template_0_table_3_span_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span");
} if (rf & 2) {
    var ctx_r776 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵclassMap(ctx_r776.getIcon());
} }
function UITreeNode_ng_template_0_table_3_span_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r777 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r777.node.label);
} }
function UITreeNode_ng_template_0_table_3_span_10_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function UITreeNode_ng_template_0_table_3_span_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtemplate(1, UITreeNode_ng_template_0_table_3_span_10_ng_container_1_Template, 1, 0, "ng-container", 15);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r778 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r778.tree.getTemplateForNode(ctx_r778.node))("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c3, ctx_r778.node));
} }
function UITreeNode_ng_template_0_table_3_td_11_p_treeNode_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "p-treeNode", 31);
} if (rf & 2) {
    var childNode_r784 = ctx.$implicit;
    var firstChild_r785 = ctx.first;
    var lastChild_r786 = ctx.last;
    ɵngcc0.ɵɵproperty("node", childNode_r784)("firstChild", firstChild_r785)("lastChild", lastChild_r786);
} }
function UITreeNode_ng_template_0_table_3_td_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 28);
    ɵngcc0.ɵɵelementStart(1, "div", 29);
    ɵngcc0.ɵɵtemplate(2, UITreeNode_ng_template_0_table_3_td_11_p_treeNode_2_Template, 1, 3, "p-treeNode", 30);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r779 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵstyleProp("display", ctx_r779.node.expanded ? "table-cell" : "none");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r779.node.children)("ngForTrackBy", ctx_r779.tree.nodeTrackBy);
} }
var _c10 = function (a0) { return { "ui-treenode-collapsed": a0 }; };
var _c11 = function (a0, a1) { return { "ui-treenode-selectable": a0, "ui-state-highlight": a1 }; };
function UITreeNode_ng_template_0_table_3_Template(rf, ctx) { if (rf & 1) {
    var _r788 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "table");
    ɵngcc0.ɵɵelementStart(1, "tbody");
    ɵngcc0.ɵɵelementStart(2, "tr");
    ɵngcc0.ɵɵtemplate(3, UITreeNode_ng_template_0_table_3_td_3_Template, 7, 6, "td", 19);
    ɵngcc0.ɵɵelementStart(4, "td", 20);
    ɵngcc0.ɵɵelementStart(5, "div", 21);
    ɵngcc0.ɵɵlistener("click", function UITreeNode_ng_template_0_table_3_Template_div_click_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r788); var ctx_r787 = ɵngcc0.ɵɵnextContext(2); return ctx_r787.onNodeClick($event); })("contextmenu", function UITreeNode_ng_template_0_table_3_Template_div_contextmenu_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r788); var ctx_r789 = ɵngcc0.ɵɵnextContext(2); return ctx_r789.onNodeRightClick($event); })("touchend", function UITreeNode_ng_template_0_table_3_Template_div_touchend_5_listener() { ɵngcc0.ɵɵrestoreView(_r788); var ctx_r790 = ɵngcc0.ɵɵnextContext(2); return ctx_r790.onNodeTouchEnd(); })("keydown", function UITreeNode_ng_template_0_table_3_Template_div_keydown_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r788); var ctx_r791 = ɵngcc0.ɵɵnextContext(2); return ctx_r791.onNodeKeydown($event); });
    ɵngcc0.ɵɵtemplate(6, UITreeNode_ng_template_0_table_3_span_6_Template, 1, 4, "span", 22);
    ɵngcc0.ɵɵtemplate(7, UITreeNode_ng_template_0_table_3_span_7_Template, 1, 2, "span", 3);
    ɵngcc0.ɵɵelementStart(8, "span", 23);
    ɵngcc0.ɵɵtemplate(9, UITreeNode_ng_template_0_table_3_span_9_Template, 2, 1, "span", 10);
    ɵngcc0.ɵɵtemplate(10, UITreeNode_ng_template_0_table_3_span_10_Template, 2, 4, "span", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(11, UITreeNode_ng_template_0_table_3_td_11_Template, 3, 4, "td", 24);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r740 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassMap(ctx_r740.node.styleClass);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r740.root);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(10, _c10, !ctx_r740.node.expanded));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(12, _c11, ctx_r740.tree.selectionMode, ctx_r740.isSelected()));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r740.isLeaf());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r740.node.icon || ctx_r740.node.expandedIcon || ctx_r740.node.collapsedIcon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r740.tree.getTemplateForNode(ctx_r740.node));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r740.tree.getTemplateForNode(ctx_r740.node));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r740.node.children && ctx_r740.node.expanded);
} }
function UITreeNode_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, UITreeNode_ng_template_0_li_0_Template, 1, 3, "li", 1);
    ɵngcc0.ɵɵtemplate(1, UITreeNode_ng_template_0_li_1_Template, 9, 25, "li", 2);
    ɵngcc0.ɵɵtemplate(2, UITreeNode_ng_template_0_li_2_Template, 1, 3, "li", 1);
    ɵngcc0.ɵɵtemplate(3, UITreeNode_ng_template_0_table_3_Template, 12, 15, "table", 3);
} if (rf & 2) {
    var ctx_r736 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r736.tree.droppableNodes);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r736.tree.horizontal);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r736.tree.droppableNodes && ctx_r736.lastChild);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r736.tree.horizontal);
} }
function Tree_div_0_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 8);
} }
function Tree_div_0_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelement(1, "i");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r795 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap("ui-tree-loading-icon pi-spin " + ctx_r795.loadingIcon);
} }
function Tree_div_0_div_3_Template(rf, ctx) { if (rf & 1) {
    var _r801 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵelementStart(1, "input", 11, 12);
    ɵngcc0.ɵɵlistener("keydown.enter", function Tree_div_0_div_3_Template_input_keydown_enter_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r801); return $event.preventDefault(); })("input", function Tree_div_0_div_3_Template_input_input_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r801); var ctx_r802 = ɵngcc0.ɵɵnextContext(2); return ctx_r802.onFilter($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(3, "span", 13);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r796 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("placeholder", ctx_r796.filterPlaceholder);
} }
function Tree_div_0_ul_4_p_treeNode_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "p-treeNode", 16);
} if (rf & 2) {
    var node_r804 = ctx.$implicit;
    var firstChild_r805 = ctx.first;
    var lastChild_r806 = ctx.last;
    var index_r807 = ctx.index;
    ɵngcc0.ɵɵproperty("node", node_r804)("firstChild", firstChild_r805)("lastChild", lastChild_r806)("index", index_r807);
} }
function Tree_div_0_ul_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ul", 14);
    ɵngcc0.ɵɵtemplate(1, Tree_div_0_ul_4_p_treeNode_1_Template, 1, 4, "p-treeNode", 15);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r797 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵattribute("aria-label", ctx_r797.ariaLabel)("aria-labelledby", ctx_r797.ariaLabelledBy);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r797.getRootNode())("ngForTrackBy", ctx_r797.nodeTrackBy);
} }
function Tree_div_0_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 17);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r798 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r798.emptyMessage);
} }
var _c12 = function (a1, a2, a3) { return { "ui-tree ui-widget ui-widget-content ui-corner-all": true, "ui-tree-selectable": a1, "ui-treenode-dragover": a2, "ui-tree-loading": a3 }; };
function Tree_div_0_Template(rf, ctx) { if (rf & 1) {
    var _r809 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵlistener("drop", function Tree_div_0_Template_div_drop_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r809); var ctx_r808 = ɵngcc0.ɵɵnextContext(); return ctx_r808.onDrop($event); })("dragover", function Tree_div_0_Template_div_dragover_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r809); var ctx_r810 = ɵngcc0.ɵɵnextContext(); return ctx_r810.onDragOver($event); })("dragenter", function Tree_div_0_Template_div_dragenter_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r809); var ctx_r811 = ɵngcc0.ɵɵnextContext(); return ctx_r811.onDragEnter($event); })("dragleave", function Tree_div_0_Template_div_dragleave_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r809); var ctx_r812 = ɵngcc0.ɵɵnextContext(); return ctx_r812.onDragLeave($event); });
    ɵngcc0.ɵɵtemplate(1, Tree_div_0_div_1_Template, 1, 0, "div", 3);
    ɵngcc0.ɵɵtemplate(2, Tree_div_0_div_2_Template, 2, 2, "div", 4);
    ɵngcc0.ɵɵtemplate(3, Tree_div_0_div_3_Template, 4, 1, "div", 5);
    ɵngcc0.ɵɵtemplate(4, Tree_div_0_ul_4_Template, 2, 4, "ul", 6);
    ɵngcc0.ɵɵtemplate(5, Tree_div_0_div_5_Template, 2, 1, "div", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r792 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r792.styleClass);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction3(9, _c12, ctx_r792.selectionMode, ctx_r792.dragHover, ctx_r792.loading))("ngStyle", ctx_r792.style);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r792.loading);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r792.loading);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r792.filter);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r792.getRootNode());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r792.loading && (ctx_r792.value == null || ctx_r792.value.length === 0));
} }
function Tree_div_1_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 21);
} }
function Tree_div_1_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelement(1, "i");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r814 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMap("ui-tree-loading-icon pi-spin " + ctx_r814.loadingIcon);
} }
function Tree_div_1_table_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "table");
    ɵngcc0.ɵɵelement(1, "p-treeNode", 22);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r815 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("node", ctx_r815.value[0])("root", true);
} }
function Tree_div_1_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 17);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r816 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r816.emptyMessage);
} }
var _c13 = function (a1) { return { "ui-tree ui-tree-horizontal ui-widget ui-widget-content ui-corner-all": true, "ui-tree-selectable": a1 }; };
function Tree_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵtemplate(1, Tree_div_1_div_1_Template, 1, 0, "div", 19);
    ɵngcc0.ɵɵtemplate(2, Tree_div_1_div_2_Template, 2, 2, "div", 4);
    ɵngcc0.ɵɵtemplate(3, Tree_div_1_table_3_Template, 2, 2, "table", 20);
    ɵngcc0.ɵɵtemplate(4, Tree_div_1_div_4_Template, 2, 1, "div", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r793 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r793.styleClass);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(8, _c13, ctx_r793.selectionMode))("ngStyle", ctx_r793.style);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r793.loading);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r793.loading);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r793.value && ctx_r793.value[0]);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r793.loading && (ctx_r793.value == null || ctx_r793.value.length === 0));
} }
'use strict';

    var __assign = (this && this.__assign) || function () {
        __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param = (this && this.__param) || function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };
    var __read = (this && this.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread = (this && this.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
    };
    var __values = (this && this.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var UITreeNode = /** @class */ (function () {
        function UITreeNode(tree) {
            this.tree = tree;
        }
        UITreeNode_1 = UITreeNode;
        UITreeNode.prototype.ngOnInit = function () {
            this.node.parent = this.parentNode;
            if (this.parentNode) {
                this.tree.syncNodeOption(this.node, this.tree.value, 'parent', this.tree.getNodeWithKey(this.parentNode.key, this.tree.value));
            }
        };
        UITreeNode.prototype.getIcon = function () {
            var icon;
            if (this.node.icon)
                icon = this.node.icon;
            else
                icon = this.node.expanded && this.node.children && this.node.children.length ? this.node.expandedIcon : this.node.collapsedIcon;
            return UITreeNode_1.ICON_CLASS + ' ' + icon;
        };
        UITreeNode.prototype.isLeaf = function () {
            return this.tree.isNodeLeaf(this.node);
        };
        UITreeNode.prototype.toggle = function (event) {
            if (this.node.expanded)
                this.collapse(event);
            else
                this.expand(event);
        };
        UITreeNode.prototype.expand = function (event) {
            this.node.expanded = true;
            this.tree.onNodeExpand.emit({ originalEvent: event, node: this.node });
        };
        UITreeNode.prototype.collapse = function (event) {
            this.node.expanded = false;
            this.tree.onNodeCollapse.emit({ originalEvent: event, node: this.node });
        };
        UITreeNode.prototype.onNodeClick = function (event) {
            this.tree.onNodeClick(event, this.node);
        };
        UITreeNode.prototype.onNodeKeydown = function (event) {
            if (event.which === 13) {
                this.tree.onNodeClick(event, this.node);
            }
        };
        UITreeNode.prototype.onNodeTouchEnd = function () {
            this.tree.onNodeTouchEnd();
        };
        UITreeNode.prototype.onNodeRightClick = function (event) {
            this.tree.onNodeRightClick(event, this.node);
        };
        UITreeNode.prototype.isSelected = function () {
            return this.tree.isSelected(this.node);
        };
        UITreeNode.prototype.onDropPoint = function (event, position) {
            var _this = this;
            event.preventDefault();
            var dragNode = this.tree.dragNode;
            var dragNodeIndex = this.tree.dragNodeIndex;
            var dragNodeScope = this.tree.dragNodeScope;
            var isValidDropPointIndex = this.tree.dragNodeTree === this.tree ? (position === 1 || dragNodeIndex !== this.index - 1) : true;
            if (this.tree.allowDrop(dragNode, this.node, dragNodeScope) && isValidDropPointIndex) {
                if (this.tree.validateDrop) {
                    this.tree.onNodeDrop.emit({
                        originalEvent: event,
                        dragNode: dragNode,
                        dropNode: this.node,
                        dropIndex: this.index,
                        accept: function () {
                            _this.processPointDrop(dragNode, dragNodeIndex, position);
                        }
                    });
                }
                else {
                    this.processPointDrop(dragNode, dragNodeIndex, position);
                    this.tree.onNodeDrop.emit({
                        originalEvent: event,
                        dragNode: dragNode,
                        dropNode: this.node,
                        dropIndex: this.index
                    });
                }
            }
            this.draghoverPrev = false;
            this.draghoverNext = false;
        };
        UITreeNode.prototype.processPointDrop = function (dragNode, dragNodeIndex, position) {
            var newNodeList = this.node.parent ? this.node.parent.children : this.tree.value;
            this.tree.dragNodeSubNodes.splice(dragNodeIndex, 1);
            var dropIndex = this.index;
            if (position < 0) {
                dropIndex = (this.tree.dragNodeSubNodes === newNodeList) ? ((this.tree.dragNodeIndex > this.index) ? this.index : this.index - 1) : this.index;
                newNodeList.splice(dropIndex, 0, dragNode);
            }
            else {
                dropIndex = newNodeList.length;
                newNodeList.push(dragNode);
            }
            this.tree.dragDropService.stopDrag({
                node: dragNode,
                subNodes: this.node.parent ? this.node.parent.children : this.tree.value,
                index: dragNodeIndex
            });
        };
        UITreeNode.prototype.onDropPointDragOver = function (event) {
            event.dataTransfer.dropEffect = 'move';
            event.preventDefault();
        };
        UITreeNode.prototype.onDropPointDragEnter = function (event, position) {
            if (this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {
                if (position < 0)
                    this.draghoverPrev = true;
                else
                    this.draghoverNext = true;
            }
        };
        UITreeNode.prototype.onDropPointDragLeave = function (event) {
            this.draghoverPrev = false;
            this.draghoverNext = false;
        };
        UITreeNode.prototype.onDragStart = function (event) {
            if (this.tree.draggableNodes && this.node.draggable !== false) {
                event.dataTransfer.setData("text", "data");
                this.tree.dragDropService.startDrag({
                    tree: this,
                    node: this.node,
                    subNodes: this.node.parent ? this.node.parent.children : this.tree.value,
                    index: this.index,
                    scope: this.tree.draggableScope
                });
            }
            else {
                event.preventDefault();
            }
        };
        UITreeNode.prototype.onDragStop = function (event) {
            this.tree.dragDropService.stopDrag({
                node: this.node,
                subNodes: this.node.parent ? this.node.parent.children : this.tree.value,
                index: this.index
            });
        };
        UITreeNode.prototype.onDropNodeDragOver = function (event) {
            event.dataTransfer.dropEffect = 'move';
            if (this.tree.droppableNodes) {
                event.preventDefault();
                event.stopPropagation();
            }
        };
        UITreeNode.prototype.onDropNode = function (event) {
            var _this = this;
            if (this.tree.droppableNodes && this.node.droppable !== false) {
                event.preventDefault();
                event.stopPropagation();
                var dragNode_1 = this.tree.dragNode;
                if (this.tree.allowDrop(dragNode_1, this.node, this.tree.dragNodeScope)) {
                    if (this.tree.validateDrop) {
                        this.tree.onNodeDrop.emit({
                            originalEvent: event,
                            dragNode: dragNode_1,
                            dropNode: this.node,
                            index: this.index,
                            accept: function () {
                                _this.processNodeDrop(dragNode_1);
                            }
                        });
                    }
                    else {
                        this.processNodeDrop(dragNode_1);
                        this.tree.onNodeDrop.emit({
                            originalEvent: event,
                            dragNode: dragNode_1,
                            dropNode: this.node,
                            index: this.index
                        });
                    }
                }
            }
            this.draghoverNode = false;
        };
        UITreeNode.prototype.processNodeDrop = function (dragNode) {
            var dragNodeIndex = this.tree.dragNodeIndex;
            this.tree.dragNodeSubNodes.splice(dragNodeIndex, 1);
            if (this.node.children)
                this.node.children.push(dragNode);
            else
                this.node.children = [dragNode];
            this.tree.dragDropService.stopDrag({
                node: dragNode,
                subNodes: this.node.parent ? this.node.parent.children : this.tree.value,
                index: this.tree.dragNodeIndex
            });
        };
        UITreeNode.prototype.onDropNodeDragEnter = function (event) {
            if (this.tree.droppableNodes && this.node.droppable !== false && this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {
                this.draghoverNode = true;
            }
        };
        UITreeNode.prototype.onDropNodeDragLeave = function (event) {
            if (this.tree.droppableNodes) {
                var rect = event.currentTarget.getBoundingClientRect();
                if (event.x > rect.left + rect.width || event.x < rect.left || event.y >= Math.floor(rect.top + rect.height) || event.y < rect.top) {
                    this.draghoverNode = false;
                }
            }
        };
        UITreeNode.prototype.onKeyDown = function (event) {
            var nodeElement = event.target.parentElement.parentElement;
            if (nodeElement.nodeName !== 'P-TREENODE') {
                return;
            }
            switch (event.which) {
                //down arrow
                case 40:
                    var listElement = (this.tree.droppableNodes) ? nodeElement.children[1].children[1] : nodeElement.children[0].children[1];
                    if (listElement && listElement.children.length > 0) {
                        this.focusNode(listElement.children[0]);
                    }
                    else {
                        var nextNodeElement = nodeElement.nextElementSibling;
                        if (nextNodeElement) {
                            this.focusNode(nextNodeElement);
                        }
                        else {
                            var nextSiblingAncestor = this.findNextSiblingOfAncestor(nodeElement);
                            if (nextSiblingAncestor) {
                                this.focusNode(nextSiblingAncestor);
                            }
                        }
                    }
                    event.preventDefault();
                    break;
                //up arrow
                case 38:
                    if (nodeElement.previousElementSibling) {
                        this.focusNode(this.findLastVisibleDescendant(nodeElement.previousElementSibling));
                    }
                    else {
                        var parentNodeElement = this.getParentNodeElement(nodeElement);
                        if (parentNodeElement) {
                            this.focusNode(parentNodeElement);
                        }
                    }
                    event.preventDefault();
                    break;
                //right arrow
                case 39:
                    if (!this.node.expanded) {
                        this.expand(event);
                    }
                    event.preventDefault();
                    break;
                //left arrow
                case 37:
                    if (this.node.expanded) {
                        this.collapse(event);
                    }
                    else {
                        var parentNodeElement = this.getParentNodeElement(nodeElement);
                        if (parentNodeElement) {
                            this.focusNode(parentNodeElement);
                        }
                    }
                    event.preventDefault();
                    break;
                //enter
                case 13:
                    this.tree.onNodeClick(event, this.node);
                    event.preventDefault();
                    break;
                default:
                    //no op
                    break;
            }
        };
        UITreeNode.prototype.findNextSiblingOfAncestor = function (nodeElement) {
            var parentNodeElement = this.getParentNodeElement(nodeElement);
            if (parentNodeElement) {
                if (parentNodeElement.nextElementSibling)
                    return parentNodeElement.nextElementSibling;
                else
                    return this.findNextSiblingOfAncestor(parentNodeElement);
            }
            else {
                return null;
            }
        };
        UITreeNode.prototype.findLastVisibleDescendant = function (nodeElement) {
            var childrenListElement = nodeElement.children[0].children[1];
            if (childrenListElement && childrenListElement.children.length > 0) {
                var lastChildElement = childrenListElement.children[childrenListElement.children.length - 1];
                return this.findLastVisibleDescendant(lastChildElement);
            }
            else {
                return nodeElement;
            }
        };
        UITreeNode.prototype.getParentNodeElement = function (nodeElement) {
            var parentNodeElement = nodeElement.parentElement.parentElement.parentElement;
            return parentNodeElement.tagName === 'P-TREENODE' ? parentNodeElement : null;
        };
        UITreeNode.prototype.focusNode = function (element) {
            if (this.tree.droppableNodes)
                element.children[1].children[0].focus();
            else
                element.children[0].children[0].focus();
        };
        var UITreeNode_1;
        UITreeNode.ICON_CLASS = 'ui-treenode-icon ';
        UITreeNode.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return Tree; }),] }] }
        ]; };
        __decorate([
            core.Input()
        ], UITreeNode.prototype, "node", void 0);
        __decorate([
            core.Input()
        ], UITreeNode.prototype, "parentNode", void 0);
        __decorate([
            core.Input()
        ], UITreeNode.prototype, "root", void 0);
        __decorate([
            core.Input()
        ], UITreeNode.prototype, "index", void 0);
        __decorate([
            core.Input()
        ], UITreeNode.prototype, "firstChild", void 0);
        __decorate([
            core.Input()
        ], UITreeNode.prototype, "lastChild", void 0);
        UITreeNode = UITreeNode_1 = __decorate([ __param(0, core.Inject(core.forwardRef(function () { return Tree; })))
        ], UITreeNode);
UITreeNode.ɵfac = function UITreeNode_Factory(t) { return new (t || UITreeNode)(ɵngcc0.ɵɵdirectiveInject(core.forwardRef(function () { return Tree; }))); };
UITreeNode.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: UITreeNode, selectors: [["p-treeNode"]], inputs: { node: "node", parentNode: "parentNode", root: "root", index: "index", firstChild: "firstChild", lastChild: "lastChild" }, decls: 1, vars: 1, consts: [[3, "ngIf"], ["class", "ui-treenode-droppoint", 3, "ngClass", "drop", "dragover", "dragenter", "dragleave", 4, "ngIf"], ["role", "treeitem", 3, "ngClass", 4, "ngIf"], [3, "class", 4, "ngIf"], [1, "ui-treenode-droppoint", 3, "ngClass", "drop", "dragover", "dragenter", "dragleave"], ["role", "treeitem", 3, "ngClass"], ["tabIndex", "0", 1, "ui-treenode-content", 3, "draggable", "ngClass", "click", "contextmenu", "touchend", "drop", "dragover", "dragenter", "dragleave", "dragstart", "dragend", "keydown"], [1, "ui-tree-toggler", "pi", "pi-fw", "ui-unselectable-text", 3, "ngClass", "click"], ["class", "ui-chkbox", 4, "ngIf"], [1, "ui-treenode-label", "ui-corner-all", 3, "ngClass"], [4, "ngIf"], ["class", "ui-treenode-children", "style", "display: none;", "role", "group", 3, "display", 4, "ngIf"], [1, "ui-chkbox"], [1, "ui-chkbox-box", "ui-widget", "ui-corner-all", "ui-state-default", 3, "ngClass"], [1, "ui-chkbox-icon", "ui-clickable", "pi", 3, "ngClass"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["role", "group", 1, "ui-treenode-children", 2, "display", "none"], [3, "node", "parentNode", "firstChild", "lastChild", "index", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "node", "parentNode", "firstChild", "lastChild", "index"], ["class", "ui-treenode-connector", 4, "ngIf"], [1, "ui-treenode", 3, "ngClass"], ["tabindex", "0", 1, "ui-treenode-content", "ui-state-default", "ui-corner-all", 3, "ngClass", "click", "contextmenu", "touchend", "keydown"], ["class", "ui-tree-toggler pi pi-fw ui-unselectable-text", 3, "ngClass", "click", 4, "ngIf"], [1, "ui-treenode-label", "ui-corner-all"], ["class", "ui-treenode-children-container", 3, "display", 4, "ngIf"], [1, "ui-treenode-connector"], [1, "ui-treenode-connector-table"], [3, "ngClass"], [1, "ui-treenode-children-container"], [1, "ui-treenode-children"], [3, "node", "firstChild", "lastChild", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "node", "firstChild", "lastChild"]], template: function UITreeNode_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, UITreeNode_ng_template_0_Template, 4, 4, "ng-template", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.node);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgClass, ɵngcc1.NgTemplateOutlet, ɵngcc1.NgForOf, UITreeNode], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UITreeNode, [{
        type: core.Component,
        args: [{
                selector: 'p-treeNode',
                template: "\n        <ng-template [ngIf]=\"node\">\n            <li *ngIf=\"tree.droppableNodes\" class=\"ui-treenode-droppoint\" [ngClass]=\"{'ui-treenode-droppoint-active ui-state-highlight':draghoverPrev}\"\n            (drop)=\"onDropPoint($event,-1)\" (dragover)=\"onDropPointDragOver($event)\" (dragenter)=\"onDropPointDragEnter($event,-1)\" (dragleave)=\"onDropPointDragLeave($event)\"></li>\n            <li *ngIf=\"!tree.horizontal\" role=\"treeitem\" [ngClass]=\"['ui-treenode',node.styleClass||'', isLeaf() ? 'ui-treenode-leaf': '']\">\n                <div class=\"ui-treenode-content\" (click)=\"onNodeClick($event)\" (contextmenu)=\"onNodeRightClick($event)\" (touchend)=\"onNodeTouchEnd()\"\n                    (drop)=\"onDropNode($event)\" (dragover)=\"onDropNodeDragOver($event)\" (dragenter)=\"onDropNodeDragEnter($event)\" (dragleave)=\"onDropNodeDragLeave($event)\"\n                    [draggable]=\"tree.draggableNodes\" (dragstart)=\"onDragStart($event)\" (dragend)=\"onDragStop($event)\" tabIndex=\"0\"\n                    [ngClass]=\"{'ui-treenode-selectable':tree.selectionMode && node.selectable !== false,'ui-treenode-dragover':draghoverNode, 'ui-treenode-content-selected':isSelected()}\" \n                    (keydown)=\"onKeyDown($event)\" [attr.aria-posinset]=\"this.index + 1\" [attr.aria-expanded]=\"this.node.expanded\" [attr.aria-selected]=\"isSelected()\">\n                    <span class=\"ui-tree-toggler pi pi-fw ui-unselectable-text\" [ngClass]=\"{'pi-caret-right':!node.expanded,'pi-caret-down':node.expanded}\"\n                            (click)=\"toggle($event)\"></span\n                    ><div class=\"ui-chkbox\" *ngIf=\"tree.selectionMode == 'checkbox'\" [attr.aria-checked]=\"isSelected()\"><div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" [ngClass]=\"{'ui-state-disabled': node.selectable === false}\">\n                        <span class=\"ui-chkbox-icon ui-clickable pi\"\n                            [ngClass]=\"{'pi-check':isSelected(),'pi-minus':node.partialSelected}\"></span></div></div\n                    ><span [class]=\"getIcon()\" *ngIf=\"node.icon||node.expandedIcon||node.collapsedIcon\"></span\n                    ><span class=\"ui-treenode-label ui-corner-all\"\n                        [ngClass]=\"{'ui-state-highlight':isSelected()}\">\n                            <span *ngIf=\"!tree.getTemplateForNode(node)\">{{node.label}}</span>\n                            <span *ngIf=\"tree.getTemplateForNode(node)\">\n                                <ng-container *ngTemplateOutlet=\"tree.getTemplateForNode(node); context: {$implicit: node}\"></ng-container>\n                            </span>\n                    </span>\n                </div>\n                <ul class=\"ui-treenode-children\" style=\"display: none;\" *ngIf=\"node.children && node.expanded\" [style.display]=\"node.expanded ? 'block' : 'none'\" role=\"group\">\n                    <p-treeNode *ngFor=\"let childNode of node.children;let firstChild=first;let lastChild=last; let index=index; trackBy: tree.nodeTrackBy\" [node]=\"childNode\" [parentNode]=\"node\"\n                        [firstChild]=\"firstChild\" [lastChild]=\"lastChild\" [index]=\"index\"></p-treeNode>\n                </ul>\n            </li>\n            <li *ngIf=\"tree.droppableNodes&&lastChild\" class=\"ui-treenode-droppoint\" [ngClass]=\"{'ui-treenode-droppoint-active ui-state-highlight':draghoverNext}\"\n            (drop)=\"onDropPoint($event,1)\" (dragover)=\"onDropPointDragOver($event)\" (dragenter)=\"onDropPointDragEnter($event,1)\" (dragleave)=\"onDropPointDragLeave($event)\"></li>\n            <table *ngIf=\"tree.horizontal\" [class]=\"node.styleClass\">\n                <tbody>\n                    <tr>\n                        <td class=\"ui-treenode-connector\" *ngIf=\"!root\">\n                            <table class=\"ui-treenode-connector-table\">\n                                <tbody>\n                                    <tr>\n                                        <td [ngClass]=\"{'ui-treenode-connector-line':!firstChild}\"></td>\n                                    </tr>\n                                    <tr>\n                                        <td [ngClass]=\"{'ui-treenode-connector-line':!lastChild}\"></td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </td>\n                        <td class=\"ui-treenode\" [ngClass]=\"{'ui-treenode-collapsed':!node.expanded}\">\n                            <div class=\"ui-treenode-content ui-state-default ui-corner-all\" tabindex=\"0\"\n                                [ngClass]=\"{'ui-treenode-selectable':tree.selectionMode,'ui-state-highlight':isSelected()}\" (click)=\"onNodeClick($event)\" (contextmenu)=\"onNodeRightClick($event)\"\n                                (touchend)=\"onNodeTouchEnd()\" (keydown)=\"onNodeKeydown($event)\">\n                                <span class=\"ui-tree-toggler pi pi-fw ui-unselectable-text\" [ngClass]=\"{'pi-plus':!node.expanded,'pi-minus':node.expanded}\" *ngIf=\"!isLeaf()\"\n                                        (click)=\"toggle($event)\"></span\n                                ><span [class]=\"getIcon()\" *ngIf=\"node.icon||node.expandedIcon||node.collapsedIcon\"></span\n                                ><span class=\"ui-treenode-label ui-corner-all\">\n                                        <span *ngIf=\"!tree.getTemplateForNode(node)\">{{node.label}}</span>\n                                        <span *ngIf=\"tree.getTemplateForNode(node)\">\n                                        <ng-container *ngTemplateOutlet=\"tree.getTemplateForNode(node); context: {$implicit: node}\"></ng-container>\n                                        </span>\n                                </span>\n                            </div>\n                        </td>\n                        <td class=\"ui-treenode-children-container\" *ngIf=\"node.children && node.expanded\" [style.display]=\"node.expanded ? 'table-cell' : 'none'\">\n                            <div class=\"ui-treenode-children\">\n                                <p-treeNode *ngFor=\"let childNode of node.children;let firstChild=first;let lastChild=last; trackBy: tree.nodeTrackBy\" [node]=\"childNode\"\n                                        [firstChild]=\"firstChild\" [lastChild]=\"lastChild\"></p-treeNode>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </ng-template>\n    "
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: core.Inject,
                args: [core.forwardRef(function () { return Tree; })]
            }] }]; }, { node: [{
            type: core.Input
        }], parentNode: [{
            type: core.Input
        }], root: [{
            type: core.Input
        }], index: [{
            type: core.Input
        }], firstChild: [{
            type: core.Input
        }], lastChild: [{
            type: core.Input
        }] }); })();
        return UITreeNode;
    }());
    var Tree = /** @class */ (function () {
        function Tree(el, dragDropService) {
            this.el = el;
            this.dragDropService = dragDropService;
            this.selectionChange = new core.EventEmitter();
            this.onNodeSelect = new core.EventEmitter();
            this.onNodeUnselect = new core.EventEmitter();
            this.onNodeExpand = new core.EventEmitter();
            this.onNodeCollapse = new core.EventEmitter();
            this.onNodeContextMenuSelect = new core.EventEmitter();
            this.onNodeDrop = new core.EventEmitter();
            this.layout = 'vertical';
            this.metaKeySelection = true;
            this.propagateSelectionUp = true;
            this.propagateSelectionDown = true;
            this.loadingIcon = 'pi pi-spinner';
            this.emptyMessage = 'No records found';
            this.filterBy = 'label';
            this.filterMode = 'lenient';
            this.nodeTrackBy = function (index, item) { return item; };
        }
        Tree.prototype.ngOnInit = function () {
            var _this = this;
            if (this.droppableNodes) {
                this.dragStartSubscription = this.dragDropService.dragStart$.subscribe(function (event) {
                    _this.dragNodeTree = event.tree;
                    _this.dragNode = event.node;
                    _this.dragNodeSubNodes = event.subNodes;
                    _this.dragNodeIndex = event.index;
                    _this.dragNodeScope = event.scope;
                });
                this.dragStopSubscription = this.dragDropService.dragStop$.subscribe(function (event) {
                    _this.dragNodeTree = null;
                    _this.dragNode = null;
                    _this.dragNodeSubNodes = null;
                    _this.dragNodeIndex = null;
                    _this.dragNodeScope = null;
                    _this.dragHover = false;
                });
            }
        };
        Object.defineProperty(Tree.prototype, "horizontal", {
            get: function () {
                return this.layout == 'horizontal';
            },
            enumerable: true,
            configurable: true
        });
        Tree.prototype.ngAfterContentInit = function () {
            var _this = this;
            if (this.templates.length) {
                this.templateMap = {};
            }
            this.templates.forEach(function (item) {
                _this.templateMap[item.name] = item.template;
            });
        };
        Tree.prototype.onNodeClick = function (event, node) {
            var eventTarget = event.target;
            if (dom.DomHandler.hasClass(eventTarget, 'ui-tree-toggler')) {
                return;
            }
            else if (this.selectionMode) {
                if (node.selectable === false) {
                    return;
                }
                if (this.hasFilteredNodes()) {
                    node = this.getNodeWithKey(node.key, this.value);
                    if (!node) {
                        return;
                    }
                }
                var index_1 = this.findIndexInSelection(node);
                var selected = (index_1 >= 0);
                if (this.isCheckboxSelectionMode()) {
                    if (selected) {
                        if (this.propagateSelectionDown)
                            this.propagateDown(node, false);
                        else
                            this.selection = this.selection.filter(function (val, i) { return i != index_1; });
                        if (this.propagateSelectionUp && node.parent) {
                            this.propagateUp(node.parent, false);
                        }
                        this.selectionChange.emit(this.selection);
                        this.onNodeUnselect.emit({ originalEvent: event, node: node });
                    }
                    else {
                        if (this.propagateSelectionDown)
                            this.propagateDown(node, true);
                        else
                            this.selection = __spread(this.selection || [], [node]);
                        if (this.propagateSelectionUp && node.parent) {
                            this.propagateUp(node.parent, true);
                        }
                        this.selectionChange.emit(this.selection);
                        this.onNodeSelect.emit({ originalEvent: event, node: node });
                    }
                }
                else {
                    var metaSelection = this.nodeTouched ? false : this.metaKeySelection;
                    if (metaSelection) {
                        var metaKey = (event.metaKey || event.ctrlKey);
                        if (selected && metaKey) {
                            if (this.isSingleSelectionMode()) {
                                this.selectionChange.emit(null);
                            }
                            else {
                                this.selection = this.selection.filter(function (val, i) { return i != index_1; });
                                this.selectionChange.emit(this.selection);
                            }
                            this.onNodeUnselect.emit({ originalEvent: event, node: node });
                        }
                        else {
                            if (this.isSingleSelectionMode()) {
                                this.selectionChange.emit(node);
                            }
                            else if (this.isMultipleSelectionMode()) {
                                this.selection = (!metaKey) ? [] : this.selection || [];
                                this.selection = __spread(this.selection, [node]);
                                this.selectionChange.emit(this.selection);
                            }
                            this.onNodeSelect.emit({ originalEvent: event, node: node });
                        }
                    }
                    else {
                        if (this.isSingleSelectionMode()) {
                            if (selected) {
                                this.selection = null;
                                this.onNodeUnselect.emit({ originalEvent: event, node: node });
                            }
                            else {
                                this.selection = node;
                                this.onNodeSelect.emit({ originalEvent: event, node: node });
                            }
                        }
                        else {
                            if (selected) {
                                this.selection = this.selection.filter(function (val, i) { return i != index_1; });
                                this.onNodeUnselect.emit({ originalEvent: event, node: node });
                            }
                            else {
                                this.selection = __spread(this.selection || [], [node]);
                                this.onNodeSelect.emit({ originalEvent: event, node: node });
                            }
                        }
                        this.selectionChange.emit(this.selection);
                    }
                }
            }
            this.nodeTouched = false;
        };
        Tree.prototype.onNodeTouchEnd = function () {
            this.nodeTouched = true;
        };
        Tree.prototype.onNodeRightClick = function (event, node) {
            if (this.contextMenu) {
                var eventTarget = event.target;
                if (eventTarget.className && eventTarget.className.indexOf('ui-tree-toggler') === 0) {
                    return;
                }
                else {
                    var index = this.findIndexInSelection(node);
                    var selected = (index >= 0);
                    if (!selected) {
                        if (this.isSingleSelectionMode())
                            this.selectionChange.emit(node);
                        else
                            this.selectionChange.emit([node]);
                    }
                    this.contextMenu.show(event);
                    this.onNodeContextMenuSelect.emit({ originalEvent: event, node: node });
                }
            }
        };
        Tree.prototype.findIndexInSelection = function (node) {
            var index = -1;
            if (this.selectionMode && this.selection) {
                if (this.isSingleSelectionMode()) {
                    var areNodesEqual = (this.selection.key && this.selection.key === node.key) || this.selection == node;
                    index = areNodesEqual ? 0 : -1;
                }
                else {
                    for (var i = 0; i < this.selection.length; i++) {
                        var selectedNode = this.selection[i];
                        var areNodesEqual = (selectedNode.key && selectedNode.key === node.key) || selectedNode == node;
                        if (areNodesEqual) {
                            index = i;
                            break;
                        }
                    }
                }
            }
            return index;
        };
        Tree.prototype.syncNodeOption = function (node, parentNodes, option, value) {
            // to synchronize the node option between the filtered nodes and the original nodes(this.value) 
            var _node = this.hasFilteredNodes() ? this.getNodeWithKey(node.key, parentNodes) : null;
            if (_node) {
                _node[option] = value || node[option];
            }
        };
        Tree.prototype.hasFilteredNodes = function () {
            return this.filter && this.filteredNodes && this.filteredNodes.length;
        };
        Tree.prototype.getNodeWithKey = function (key, nodes) {
            var e_1, _a;
            try {
                for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
                    var node = nodes_1_1.value;
                    if (node.key === key) {
                        return node;
                    }
                    if (node.children) {
                        var matchedNode = this.getNodeWithKey(key, node.children);
                        if (matchedNode) {
                            return matchedNode;
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        Tree.prototype.propagateUp = function (node, select) {
            var e_2, _a;
            if (node.children && node.children.length) {
                var selectedCount = 0;
                var childPartialSelected = false;
                try {
                    for (var _b = __values(node.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var child = _c.value;
                        if (this.isSelected(child)) {
                            selectedCount++;
                        }
                        else if (child.partialSelected) {
                            childPartialSelected = true;
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                if (select && selectedCount == node.children.length) {
                    this.selection = __spread(this.selection || [], [node]);
                    node.partialSelected = false;
                }
                else {
                    if (!select) {
                        var index_2 = this.findIndexInSelection(node);
                        if (index_2 >= 0) {
                            this.selection = this.selection.filter(function (val, i) { return i != index_2; });
                        }
                    }
                    if (childPartialSelected || selectedCount > 0 && selectedCount != node.children.length)
                        node.partialSelected = true;
                    else
                        node.partialSelected = false;
                }
                this.syncNodeOption(node, this.filteredNodes, 'partialSelected');
            }
            var parent = node.parent;
            if (parent) {
                this.propagateUp(parent, select);
            }
        };
        Tree.prototype.propagateDown = function (node, select) {
            var e_3, _a;
            var index = this.findIndexInSelection(node);
            if (select && index == -1) {
                this.selection = __spread(this.selection || [], [node]);
            }
            else if (!select && index > -1) {
                this.selection = this.selection.filter(function (val, i) { return i != index; });
            }
            node.partialSelected = false;
            this.syncNodeOption(node, this.filteredNodes, 'partialSelected');
            if (node.children && node.children.length) {
                try {
                    for (var _b = __values(node.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var child = _c.value;
                        this.propagateDown(child, select);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
        };
        Tree.prototype.isSelected = function (node) {
            return this.findIndexInSelection(node) != -1;
        };
        Tree.prototype.isSingleSelectionMode = function () {
            return this.selectionMode && this.selectionMode == 'single';
        };
        Tree.prototype.isMultipleSelectionMode = function () {
            return this.selectionMode && this.selectionMode == 'multiple';
        };
        Tree.prototype.isCheckboxSelectionMode = function () {
            return this.selectionMode && this.selectionMode == 'checkbox';
        };
        Tree.prototype.isNodeLeaf = function (node) {
            return node.leaf == false ? false : !(node.children && node.children.length);
        };
        Tree.prototype.getRootNode = function () {
            return this.filteredNodes ? this.filteredNodes : this.value;
        };
        Tree.prototype.getTemplateForNode = function (node) {
            if (this.templateMap)
                return node.type ? this.templateMap[node.type] : this.templateMap['default'];
            else
                return null;
        };
        Tree.prototype.onDragOver = function (event) {
            if (this.droppableNodes && (!this.value || this.value.length === 0)) {
                event.dataTransfer.dropEffect = 'move';
                event.preventDefault();
            }
        };
        Tree.prototype.onDrop = function (event) {
            if (this.droppableNodes && (!this.value || this.value.length === 0)) {
                event.preventDefault();
                var dragNode = this.dragNode;
                if (this.allowDrop(dragNode, null, this.dragNodeScope)) {
                    var dragNodeIndex = this.dragNodeIndex;
                    this.dragNodeSubNodes.splice(dragNodeIndex, 1);
                    this.value = this.value || [];
                    this.value.push(dragNode);
                    this.dragDropService.stopDrag({
                        node: dragNode
                    });
                }
            }
        };
        Tree.prototype.onDragEnter = function (event) {
            if (this.droppableNodes && this.allowDrop(this.dragNode, null, this.dragNodeScope)) {
                this.dragHover = true;
            }
        };
        Tree.prototype.onDragLeave = function (event) {
            if (this.droppableNodes) {
                var rect = event.currentTarget.getBoundingClientRect();
                if (event.x > rect.left + rect.width || event.x < rect.left || event.y > rect.top + rect.height || event.y < rect.top) {
                    this.dragHover = false;
                }
            }
        };
        Tree.prototype.allowDrop = function (dragNode, dropNode, dragNodeScope) {
            if (!dragNode) {
                //prevent random html elements to be dragged
                return false;
            }
            else if (this.isValidDragScope(dragNodeScope)) {
                var allow = true;
                if (dropNode) {
                    if (dragNode === dropNode) {
                        allow = false;
                    }
                    else {
                        var parent_1 = dropNode.parent;
                        while (parent_1 != null) {
                            if (parent_1 === dragNode) {
                                allow = false;
                                break;
                            }
                            parent_1 = parent_1.parent;
                        }
                    }
                }
                return allow;
            }
            else {
                return false;
            }
        };
        Tree.prototype.isValidDragScope = function (dragScope) {
            var e_4, _a, e_5, _b;
            var dropScope = this.droppableScope;
            if (dropScope) {
                if (typeof dropScope === 'string') {
                    if (typeof dragScope === 'string')
                        return dropScope === dragScope;
                    else if (dragScope instanceof Array)
                        return dragScope.indexOf(dropScope) != -1;
                }
                else if (dropScope instanceof Array) {
                    if (typeof dragScope === 'string') {
                        return dropScope.indexOf(dragScope) != -1;
                    }
                    else if (dragScope instanceof Array) {
                        try {
                            for (var dropScope_1 = __values(dropScope), dropScope_1_1 = dropScope_1.next(); !dropScope_1_1.done; dropScope_1_1 = dropScope_1.next()) {
                                var s = dropScope_1_1.value;
                                try {
                                    for (var dragScope_1 = (e_5 = void 0, __values(dragScope)), dragScope_1_1 = dragScope_1.next(); !dragScope_1_1.done; dragScope_1_1 = dragScope_1.next()) {
                                        var ds = dragScope_1_1.value;
                                        if (s === ds) {
                                            return true;
                                        }
                                    }
                                }
                                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                                finally {
                                    try {
                                        if (dragScope_1_1 && !dragScope_1_1.done && (_b = dragScope_1.return)) _b.call(dragScope_1);
                                    }
                                    finally { if (e_5) throw e_5.error; }
                                }
                            }
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (dropScope_1_1 && !dropScope_1_1.done && (_a = dropScope_1.return)) _a.call(dropScope_1);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                    }
                }
                return false;
            }
            else {
                return true;
            }
        };
        Tree.prototype.onFilter = function (event) {
            var e_6, _a;
            var filterValue = event.target.value;
            if (filterValue === '') {
                this.filteredNodes = null;
            }
            else {
                this.filteredNodes = [];
                var searchFields = this.filterBy.split(',');
                var filterText = utils.ObjectUtils.removeAccents(filterValue).toLowerCase();
                var isStrictMode = this.filterMode === 'strict';
                try {
                    for (var _b = __values(this.value), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var node = _c.value;
                        var copyNode = __assign({}, node);
                        var paramsWithoutNode = { searchFields: searchFields, filterText: filterText, isStrictMode: isStrictMode };
                        if ((isStrictMode && (this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||
                            (!isStrictMode && (this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {
                            this.filteredNodes.push(copyNode);
                        }
                    }
                }
                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_6) throw e_6.error; }
                }
            }
        };
        Tree.prototype.findFilteredNodes = function (node, paramsWithoutNode) {
            var e_7, _a;
            if (node) {
                var matched = false;
                if (node.children) {
                    var childNodes = __spread(node.children);
                    node.children = [];
                    try {
                        for (var childNodes_1 = __values(childNodes), childNodes_1_1 = childNodes_1.next(); !childNodes_1_1.done; childNodes_1_1 = childNodes_1.next()) {
                            var childNode = childNodes_1_1.value;
                            var copyChildNode = __assign({}, childNode);
                            if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {
                                matched = true;
                                node.children.push(copyChildNode);
                            }
                        }
                    }
                    catch (e_7_1) { e_7 = { error: e_7_1 }; }
                    finally {
                        try {
                            if (childNodes_1_1 && !childNodes_1_1.done && (_a = childNodes_1.return)) _a.call(childNodes_1);
                        }
                        finally { if (e_7) throw e_7.error; }
                    }
                }
                if (matched) {
                    node.expanded = true;
                    return true;
                }
            }
        };
        Tree.prototype.isFilterMatched = function (node, _a) {
            var e_8, _b;
            var searchFields = _a.searchFields, filterText = _a.filterText, isStrictMode = _a.isStrictMode;
            var matched = false;
            try {
                for (var searchFields_1 = __values(searchFields), searchFields_1_1 = searchFields_1.next(); !searchFields_1_1.done; searchFields_1_1 = searchFields_1.next()) {
                    var field = searchFields_1_1.value;
                    var fieldValue = utils.ObjectUtils.removeAccents(String(utils.ObjectUtils.resolveFieldData(node, field))).toLowerCase();
                    if (fieldValue.indexOf(filterText) > -1) {
                        matched = true;
                    }
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (searchFields_1_1 && !searchFields_1_1.done && (_b = searchFields_1.return)) _b.call(searchFields_1);
                }
                finally { if (e_8) throw e_8.error; }
            }
            if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {
                matched = this.findFilteredNodes(node, { searchFields: searchFields, filterText: filterText, isStrictMode: isStrictMode }) || matched;
            }
            return matched;
        };
        Tree.prototype.getBlockableElement = function () {
            return this.el.nativeElement.children[0];
        };
        Tree.prototype.ngOnDestroy = function () {
            if (this.dragStartSubscription) {
                this.dragStartSubscription.unsubscribe();
            }
            if (this.dragStopSubscription) {
                this.dragStopSubscription.unsubscribe();
            }
        };
        Tree.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: api.TreeDragDropService, decorators: [{ type: core.Optional }] }
        ]; };
        __decorate([
            core.Input()
        ], Tree.prototype, "value", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "selectionMode", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "selection", void 0);
        __decorate([
            core.Output()
        ], Tree.prototype, "selectionChange", void 0);
        __decorate([
            core.Output()
        ], Tree.prototype, "onNodeSelect", void 0);
        __decorate([
            core.Output()
        ], Tree.prototype, "onNodeUnselect", void 0);
        __decorate([
            core.Output()
        ], Tree.prototype, "onNodeExpand", void 0);
        __decorate([
            core.Output()
        ], Tree.prototype, "onNodeCollapse", void 0);
        __decorate([
            core.Output()
        ], Tree.prototype, "onNodeContextMenuSelect", void 0);
        __decorate([
            core.Output()
        ], Tree.prototype, "onNodeDrop", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "style", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "styleClass", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "contextMenu", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "layout", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "draggableScope", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "droppableScope", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "draggableNodes", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "droppableNodes", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "metaKeySelection", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "propagateSelectionUp", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "propagateSelectionDown", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "loading", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "loadingIcon", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "emptyMessage", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "ariaLabel", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "ariaLabelledBy", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "validateDrop", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "filter", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "filterBy", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "filterMode", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "filterPlaceholder", void 0);
        __decorate([
            core.Input()
        ], Tree.prototype, "nodeTrackBy", void 0);
        __decorate([
            core.ContentChildren(api.PrimeTemplate)
        ], Tree.prototype, "templates", void 0);
        Tree = __decorate([ __param(1, core.Optional())
        ], Tree);
Tree.ɵfac = function Tree_Factory(t) { return new (t || Tree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TreeDragDropService, 8)); };
Tree.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: Tree, selectors: [["p-tree"]], contentQueries: function Tree_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, api.PrimeTemplate, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templates = _t);
    } }, inputs: { layout: "layout", metaKeySelection: "metaKeySelection", propagateSelectionUp: "propagateSelectionUp", propagateSelectionDown: "propagateSelectionDown", loadingIcon: "loadingIcon", emptyMessage: "emptyMessage", filterBy: "filterBy", filterMode: "filterMode", nodeTrackBy: "nodeTrackBy", selection: "selection", value: "value", selectionMode: "selectionMode", style: "style", styleClass: "styleClass", contextMenu: "contextMenu", draggableScope: "draggableScope", droppableScope: "droppableScope", draggableNodes: "draggableNodes", droppableNodes: "droppableNodes", loading: "loading", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", validateDrop: "validateDrop", filter: "filter", filterPlaceholder: "filterPlaceholder" }, outputs: { selectionChange: "selectionChange", onNodeSelect: "onNodeSelect", onNodeUnselect: "onNodeUnselect", onNodeExpand: "onNodeExpand", onNodeCollapse: "onNodeCollapse", onNodeContextMenuSelect: "onNodeContextMenuSelect", onNodeDrop: "onNodeDrop" }, decls: 2, vars: 2, consts: [[3, "ngClass", "ngStyle", "class", "drop", "dragover", "dragenter", "dragleave", 4, "ngIf"], [3, "ngClass", "ngStyle", "class", 4, "ngIf"], [3, "ngClass", "ngStyle", "drop", "dragover", "dragenter", "dragleave"], ["class", "ui-tree-loading-mask ui-widget-overlay", 4, "ngIf"], ["class", "ui-tree-loading-content", 4, "ngIf"], ["class", "ui-tree-filter-container", 4, "ngIf"], ["class", "ui-tree-container", "role", "tree", 4, "ngIf"], ["class", "ui-tree-empty-message", 4, "ngIf"], [1, "ui-tree-loading-mask", "ui-widget-overlay"], [1, "ui-tree-loading-content"], [1, "ui-tree-filter-container"], ["type", "text", "autocomplete", "off", 1, "ui-tree-filter", "ui-inputtext", "ui-widget", "ui-state-default", "ui-corner-all", 3, "keydown.enter", "input"], ["filter", ""], [1, "ui-tree-filter-icon", "pi", "pi-search"], ["role", "tree", 1, "ui-tree-container"], [3, "node", "firstChild", "lastChild", "index", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "node", "firstChild", "lastChild", "index"], [1, "ui-tree-empty-message"], [3, "ngClass", "ngStyle"], ["class", "ui-tree-loading ui-widget-overlay", 4, "ngIf"], [4, "ngIf"], [1, "ui-tree-loading", "ui-widget-overlay"], [3, "node", "root"]], template: function Tree_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, Tree_div_0_Template, 6, 13, "div", 0);
        ɵngcc0.ɵɵtemplate(1, Tree_div_1_Template, 5, 10, "div", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.horizontal);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.horizontal);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgClass, ɵngcc1.NgStyle, ɵngcc1.NgForOf, UITreeNode], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Tree, [{
        type: core.Component,
        args: [{
                selector: 'p-tree',
                template: "\n        <div [ngClass]=\"{'ui-tree ui-widget ui-widget-content ui-corner-all':true,'ui-tree-selectable':selectionMode,'ui-treenode-dragover':dragHover,'ui-tree-loading': loading}\" [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"!horizontal\"\n            (drop)=\"onDrop($event)\" (dragover)=\"onDragOver($event)\" (dragenter)=\"onDragEnter($event)\" (dragleave)=\"onDragLeave($event)\">\n            <div class=\"ui-tree-loading-mask ui-widget-overlay\" *ngIf=\"loading\"></div>\n            <div class=\"ui-tree-loading-content\" *ngIf=\"loading\">\n                <i [class]=\"'ui-tree-loading-icon pi-spin ' + loadingIcon\"></i>\n            </div>\n            <div *ngIf=\"filter\" class=\"ui-tree-filter-container\">\n                <input #filter type=\"text\" autocomplete=\"off\" class=\"ui-tree-filter ui-inputtext ui-widget ui-state-default ui-corner-all\" [attr.placeholder]=\"filterPlaceholder\"\n                    (keydown.enter)=\"$event.preventDefault()\" (input)=\"onFilter($event)\">\n                    <span class=\"ui-tree-filter-icon pi pi-search\"></span>\n            </div>\n            <ul class=\"ui-tree-container\" *ngIf=\"getRootNode()\" role=\"tree\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n                <p-treeNode *ngFor=\"let node of getRootNode(); let firstChild=first;let lastChild=last; let index=index; trackBy: nodeTrackBy\" [node]=\"node\"\n                [firstChild]=\"firstChild\" [lastChild]=\"lastChild\" [index]=\"index\"></p-treeNode>\n            </ul>\n            <div class=\"ui-tree-empty-message\" *ngIf=\"!loading && (value == null || value.length === 0)\">{{emptyMessage}}</div>\n        </div>\n        <div [ngClass]=\"{'ui-tree ui-tree-horizontal ui-widget ui-widget-content ui-corner-all':true,'ui-tree-selectable':selectionMode}\"  [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"horizontal\">\n            <div class=\"ui-tree-loading ui-widget-overlay\" *ngIf=\"loading\"></div>\n            <div class=\"ui-tree-loading-content\" *ngIf=\"loading\">\n                <i [class]=\"'ui-tree-loading-icon pi-spin ' + loadingIcon\"></i>\n            </div>\n            <table *ngIf=\"value&&value[0]\">\n                <p-treeNode [node]=\"value[0]\" [root]=\"true\"></p-treeNode>\n            </table>\n            <div class=\"ui-tree-empty-message\" *ngIf=\"!loading && (value == null || value.length === 0)\">{{emptyMessage}}</div>\n        </div>\n    "
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc2.TreeDragDropService, decorators: [{
                type: core.Optional
            }] }]; }, { selectionChange: [{
            type: core.Output
        }], onNodeSelect: [{
            type: core.Output
        }], onNodeUnselect: [{
            type: core.Output
        }], onNodeExpand: [{
            type: core.Output
        }], onNodeCollapse: [{
            type: core.Output
        }], onNodeContextMenuSelect: [{
            type: core.Output
        }], onNodeDrop: [{
            type: core.Output
        }], layout: [{
            type: core.Input
        }], metaKeySelection: [{
            type: core.Input
        }], propagateSelectionUp: [{
            type: core.Input
        }], propagateSelectionDown: [{
            type: core.Input
        }], loadingIcon: [{
            type: core.Input
        }], emptyMessage: [{
            type: core.Input
        }], filterBy: [{
            type: core.Input
        }], filterMode: [{
            type: core.Input
        }], nodeTrackBy: [{
            type: core.Input
        }], selection: [{
            type: core.Input
        }], value: [{
            type: core.Input
        }], selectionMode: [{
            type: core.Input
        }], style: [{
            type: core.Input
        }], styleClass: [{
            type: core.Input
        }], contextMenu: [{
            type: core.Input
        }], draggableScope: [{
            type: core.Input
        }], droppableScope: [{
            type: core.Input
        }], draggableNodes: [{
            type: core.Input
        }], droppableNodes: [{
            type: core.Input
        }], loading: [{
            type: core.Input
        }], ariaLabel: [{
            type: core.Input
        }], ariaLabelledBy: [{
            type: core.Input
        }], validateDrop: [{
            type: core.Input
        }], filter: [{
            type: core.Input
        }], filterPlaceholder: [{
            type: core.Input
        }], templates: [{
            type: core.ContentChildren,
            args: [api.PrimeTemplate]
        }] }); })();
        return Tree;
    }());
    var TreeModule = /** @class */ (function () {
        function TreeModule() {
        }
TreeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TreeModule });
TreeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TreeModule_Factory(t) { return new (t || TreeModule)(); }, imports: [[common.CommonModule], ɵngcc2.SharedModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TreeModule, { declarations: [Tree,
        UITreeNode], imports: [ɵngcc1.CommonModule], exports: [Tree, ɵngcc2.SharedModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule],
                exports: [Tree, api.SharedModule],
                declarations: [Tree, UITreeNode]
            }]
    }], function () { return []; }, null); })();
        return TreeModule;
    }());

    exports.Tree = Tree;
    exports.TreeModule = TreeModule;
    exports.UITreeNode = UITreeNode;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=primeng-tree.umd.js.map